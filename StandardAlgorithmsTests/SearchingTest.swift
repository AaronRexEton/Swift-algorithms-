//
//  SearchingTest.swift
//  StandardAlgorithmsTests
//
//  Created by Aaron Rex on 09/11/2019.
//  Copyright Â© 2019 Rex, Aaron (SPH). All rights reserved.
//

import XCTest

class SearchingTest: XCTestCase {
    func testLinearSearchWithIntegerArraysToFindSpecifiedValue() {
        let searching = Searching()
        
        let testCases = [(numberToFind: 7, input: [10, 3, 2,7, 1], expected: true), (numberToFind: 300, input: [456, 300, 3, 1, 5, 4], expected: true)]
        //act
        //assert
        for testCase in testCases { 
            let actual = searching.linearSearch(array: testCase.input, numberToFind: testCase.numberToFind)
            XCTAssertEqual(actual, testCase.expected)
            
        }
        
        
    }
    
   func testBinarySearchWithIntegerArraysToFindSpecifiedValue() {
        //arrange
        let searching = Searching()
        
    let testCases = [(numberToFind: 17, input: [3, 10, 17, 235, 1000], expected: true), (numberToFind: 7, input: [3, 100, 5343, 433343], expected: false)]
    
        //act
        //assert
        for testCase in testCases {
        let actual = searching.binarySearch(array: testCase.input, numberToFind: testCase.numberToFind)
        XCTAssertEqual(actual, testCase.expected)
        }
    
    }

//------------------Linear Search Performance Tests-------
    func testLinearSearchPerformance1() {
        let data1 = [281, 136, 19, 498, 638]
    

        let searching = Searching()
            
        measure {
            searching.linearSearch(array: data1, numberToFind: 498)
        
        }

    }
    
    func testLinearSearchPerformance2() {
        let data = [207, 758, 871, 960, 644, 182, 812, 313, 477, 381, 288, 906, 865, 160, 142, 993, 13, 252, 101, 696, 481, 444, 187, 207, 629, 274, 61, 154, 260, 838, 484, 245, 813, 269, 800, 579, 703, 803, 521, 815, 163, 911, 666, 612, 585, 784, 364, 472, 899, 591]
      


        let searching = Searching()
            
        measure {
            searching.linearSearch(array: data, numberToFind: 696)
        
        }
    }
    
    func testLinearSearchPerformance3() {
        
        let data = [198, 823, 490, 520, 341, 87, 101, 889, 612, 525, 464, 3, 109, 208, 582, 323, 529, 227, 301, 617, 530, 721, 730, 223,662, 929, 290, 66, 997, 464, 165, 955, 503, 141, 688, 938,758, 34, 34, 770, 689, 194, 259, 225, 765, 536, 339, 373, 116, 338, 821, 84, 814, 627, 647, 532, 258, 185, 677, 339, 651, 833, 438, 136, 250, 949, 18, 82, 811, 704, 297, 620, 768, 335, 857, 352, 352, 417, 852, 982, 469, 869, 638, 458, 716, 949, 350, 173, 668, 604, 765, 384, 590, 867, 682, 307,922, 575, 260, 150, 155, 434, 104, 449, 18, 436, 846, 954,554, 617, 405, 279, 299, 213, 394, 925, 367, 298, 539, 767, 788, 376, 409, 627, 544, 377, 277, 66, 300, 856, 692, 794, 859, 407, 189, 449, 265, 418, 994, 961, 614, 313, 547, 414, 313, 995, 878, 703, 66, 111, 417, 421, 852, 147, 774, 154, 88, 283, 431, 907, 895, 756, 509, 570, 60, 32, 4, 212, 182, 564, 117, 419, 277, 546, 496, 193, 394, 747, 444, 226, 201, 348, 690, 708, 281, 292, 713, 913, 831, 261, 514, 561,512, 548, 307, 855, 47, 188, 330, 500, 947, 85, 116, 743, 606, 101, 611, 610, 865, 417, 182, 328, 456, 600, 832, 602,795, 488, 165, 615, 79, 693, 476, 325, 540, 480, 606, 37, 49, 519, 201, 981, 999, 832, 298, 221, 600, 590, 433, 416, 829, 559, 513, 208, 490, 756, 230, 273, 600, 294, 105, 177,722, 370, 156, 9, 735, 25, 354, 789, 174, 795, 31, 180, 263, 235, 378, 714, 47, 260, 943, 824, 450, 601, 832, 687, 290, 197, 829, 860, 951, 343, 45, 952, 420, 882, 254, 849, 40, 248, 569, 987, 151, 292, 153, 37, 278, 649, 74, 504, 832,452, 756, 122, 996, 200, 894, 625, 65, 300, 308, 540, 653,683, 336, 805, 464, 905, 562, 921, 895, 57, 325, 575, 878,616, 470, 577, 363, 287, 325, 120, 201, 659, 189, 137, 694, 873, 320, 901, 61, 991, 440, 381, 389, 727, 602, 47, 475,417, 609, 672, 284, 774, 201, 697, 647, 238, 342, 36, 579,654, 855, 574, 195, 484, 327, 374, 428, 573, 526, 282, 828, 698, 847, 464, 102, 250, 442, 128, 936, 867, 942, 282, 252, 288, 537, 927, 122, 537, 889, 706, 548, 346, 933, 496, 119, 176, 212, 536, 463, 915, 931, 42, 310, 111, 458, 608, 851, 84, 921, 820, 832, 820, 638, 853, 244, 313, 247, 733, 17, 568, 481, 131, 510, 126, 676, 976, 282, 386, 878, 53, 442, 376, 437, 361, 879, 749, 442, 125, 597, 475, 478, 347, 350, 406, 561, 434, 146, 991, 899, 664, 835, 632, 477, 358, 831, 230, 419, 751, 803, 509, 802, 55, 898, 111, 619, 746, 744, 875, 566, 547, 851, 698, 672, 296, 302, 39, 15, 503, 287, 683, 192, 373, 274, 395, 542, 24, 899, 506, 862, 628, 270, 13, 467, 865, 613, 774, 328, 302]



        let searching = Searching()
            
        measure {
            searching.linearSearch(array: data, numberToFind: 111)
        
        }

    }
//-------------- Binary Search Tests -------------
    
    func testBinarySearchPerformance1() {
        let data = [281, 136, 19, 498, 638]
    

        let searching = Searching()
            
        measure {
            searching.binarySearch(array: data, numberToFind: 498)
        
        }

    }
    
    func testBinarySearchPerformance2() {
        let data = [13, 61, 101, 142, 154, 160, 163, 182, 187, 207, 207, 245,252, 260, 269, 274, 288, 313, 364, 381, 444, 472, 477, 481, 484, 521, 579, 585, 591, 612, 629, 644, 666, 696, 703, 758, 784, 800, 803, 812, 813, 815, 838, 865, 871, 899, 906, 911, 960, 993]
      


        let searching = Searching()
            
        measure {
            searching.binarySearch(array: data, numberToFind: 696)
        
        }
    }
    
    func testBinarySearchPerformance3() {
        
        let data = [3, 4, 9, 13, 15, 17, 18, 18, 24, 25, 31, 32, 34, 34, 36, 37, 37, 39, 40, 42, 45, 47, 47, 47, 49, 53, 55, 57, 60, 61,65, 66, 66, 66, 74, 79, 82, 84, 84, 85, 87, 88, 101, 101, 102, 104, 105, 109, 111, 111, 111, 116, 116, 117, 119, 120,122, 122, 125, 126, 128, 131, 136, 137, 141, 146, 147, 150, 151, 153, 154, 155, 156, 165, 165, 173, 174, 176, 177, 180, 182, 182, 185, 188, 189, 189, 192, 193, 194, 195, 197, 198, 200, 201, 201, 201, 201, 208, 208, 212, 212, 213, 221, 223, 225, 226, 227, 230, 230, 235, 238, 244, 247, 248, 250,250, 252, 254, 258, 259, 260, 260, 261, 263, 265, 270, 273, 274, 277, 277, 278, 279, 281, 282, 282, 282, 283, 284, 287, 287, 288, 290, 290, 292, 292, 294, 296, 297, 298, 298, 299, 300, 300, 301, 302, 302, 307, 307, 308, 310, 313, 313, 313, 320, 323, 325, 325, 325, 327, 328, 328, 330, 335, 336,338, 339, 339, 341, 342, 343, 346, 347, 348, 350, 350, 352, 354, 358, 361, 363, 367, 370, 373, 373, 374, 376, 376, 377, 378, 381, 384, 386, 389, 394, 394, 395, 405, 406, 407, 409, 414, 416, 417, 417, 417, 417, 418, 419, 419, 420, 421, 428, 431, 433, 434, 434, 436, 437, 438, 440, 442, 442, 442,444, 449, 449, 450, 452, 456, 458, 458, 463, 464, 464, 464, 464, 467, 469, 470, 475, 475, 476, 477, 478, 480, 481, 484, 488, 490, 490, 496, 496, 500, 503, 503, 504, 506, 509, 509, 510, 512, 513, 514, 519, 520, 525, 526, 529, 530, 532, 536, 536, 537, 539, 540, 540, 542, 544, 546, 547, 547, 548,548, 554, 559, 561, 561, 562, 564, 566, 568, 569, 570, 573, 574, 575, 575, 577, 579, 582, 590, 590, 597, 600, 600, 600, 601, 602, 602, 604, 606, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 617, 619, 620, 625, 627, 627, 628, 632, 638, 638, 647, 647, 649, 651, 653, 654, 659, 662, 664,668, 672, 672, 676, 677, 682, 683, 683, 687, 688, 689, 690, 692, 693, 694, 697, 698, 698, 703, 704, 706, 708, 713, 714, 716, 721, 722, 727, 730, 733, 735, 743, 744, 746, 747, 749, 751, 756, 756, 756, 758, 765, 765, 767, 768, 770, 774, 774, 774, 788, 789, 794, 795, 795, 802, 803, 805, 811, 814,820, 820, 821, 823, 824, 828, 829, 829, 831, 831, 832, 832, 832, 832, 832, 833, 835, 846, 847, 849, 851, 851, 852, 852, 853, 855, 855, 856, 857, 859, 860, 862, 865, 865, 867, 867, 869, 873, 875, 878, 878, 878, 879, 882, 889, 889, 894, 895, 895, 898, 899, 901, 905, 907, 913, 915, 921, 921, 922,925, 927, 929, 931, 933, 936, 938, 942, 943, 947, 949, 949, 951, 952, 954, 955, 961, 976, 981, 982, 987, 991, 994, 995, 996, 997, 999]



        let searching = Searching()
            
        measure {
            searching.binarySearch(array: data, numberToFind: 111)
        
        }

    }

        
        
       
    
}
