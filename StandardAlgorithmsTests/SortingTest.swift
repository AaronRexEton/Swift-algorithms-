//
//  SortingTest.swift
//  StandardAlgorithmsTests
//
//  Created by Rex, Aaron (SPH) on 07/11/2019.
//  Copyright Â© 2019 Rex, Aaron (SPH). All rights reserved.
//

import XCTest

class SortingTest: XCTestCase {

    func testBubbleSortWithIntegerArrayReturnsSortedIntegers() {
        //arrange
        let sorting = Sorting()
        let data = [5, 4, 1 , 3]
        
        //act
        let actual = sorting.bubbleSort(array: data)
        //assert
        XCTAssertEqual(actual, [1, 3, 4, 5])
    }
    
    func testBubbleSortWithMultipleIntegerArraysReturnsSortedIntegerArrays() {
        //arrange
        let sorting = Sorting()
        let testCases = [(input: [10, 3, 2,7, 1], expected: [1, 2, 3, 7, 10]), (input: [456, 300, 3, 1, 5, 4], expected: [1, 3, 4, 5, 300, 456]), (input: [8, 10, 546, 34, 7], expected: [7, 8, 10, 34, 546]), (input: [192, 300, 69, 1, 95, 4], expected: [1, 4, 69, 95, 192, 300]), (input: [4, 32, 23, 12, 6532, 64, 345, 1], expected: [1, 4, 12,  23, 32, 64, 345, 6532]), (input: [19, 3, 99, 432, 51, 7, 8888], expected: [3, 7, 19, 51, 99, 432, 8888])]
        //act
        //assert
        for testCase in testCases {
            let actual = sorting.bubbleSort(array: testCase.input)
            XCTAssertEqual(actual, testCase.expected)
        }
    }
    
    func testMergeSortWithMultipleIntegerArraysReturnsSortedIntegerArrays() {
        //arrange
        let sorting = Sorting()
        let testCases = [(input: [10, 3, 2,7, 1], expected: [1, 2, 3, 7, 10]), (input: [456, 300, 3, 1, 5, 4], expected: [1, 3, 4, 5, 300, 456]), (input: [8, 10, 546, 34, 7], expected: [7, 8, 10, 34, 546]), (input: [192, 300, 69, 1, 95, 4], expected: [1, 4, 69, 95, 192, 300]), (input: [4, 32, 23, 12, 6532, 64, 345, 1], expected: [1, 4, 12,  23, 32, 64, 345, 6532]), (input: [19, 3, 99, 432, 51, 7, 8888], expected: [3, 7, 19, 51, 99, 432, 8888])]
        //act
        //assert
        for testCase in testCases {
            let actual = sorting.mergeSort(array: testCase.input)
            XCTAssertEqual(actual, testCase.expected)
        }
    }
    func testMergeFunctionWithTwoIntegerArraysReturnsMergedArray() {
        //arrange
        let sorting = Sorting()
        let testCases = [(input1: [2, 7, 10], input2: [3, 5, 6], expected: [2, 3, 5, 6, 7, 10]), (input1: [3, 32, 54], input2: [5, 9, 16], expected: [3, 5, 9, 16, 32, 54])]
        //act
        //assert
        for testCase in testCases {
            let actual = sorting.merge(array1: testCase.input1, array2: testCase.input2)
            XCTAssertEqual(actual, testCase.expected)
        }
    }
    
        
    func testQuickSortWithMultipleIntegerArraysReturnsSortedIntegerArrays() {
        //arrange
        let sorting = Sorting()
        let testCases = [(input: [10, 3, 2,7, 1], expected: [1, 2, 3, 7, 10]), (input: [456, 300, 3, 1, 5, 4], expected: [1, 3, 4, 5, 300, 456]), (input: [8, 10, 546, 34, 7], expected: [7, 8, 10, 34, 546]), (input: [192, 300, 69, 1, 95, 4], expected: [1, 4, 69, 95, 192, 300]), (input: [4, 32, 23, 12, 6532, 64, 345, 1], expected: [1, 4, 12,  23, 32, 64, 345, 6532]), (input: [19, 3, 99, 432, 51, 7, 8888], expected: [3, 7, 19, 51, 99, 432, 8888])]
        //act
        //assert
        for testCase in testCases {
            let actual = sorting.quickSort(array: testCase.input)
            XCTAssertEqual(actual, testCase.expected)
                
        }
    }
    func testInsertionSortWithMultipleIntegerArraysReturnsSortedIntegerArrays() {
        //arrange
        let sorting = Sorting()
        let testCases = [(input: [10, 3, 2,7, 1], expected: [1, 2, 3, 7, 10]), (input: [456, 300, 3, 1, 5, 4], expected: [1, 3, 4, 5, 300, 456]), (input: [8, 10, 546, 34, 7], expected: [7, 8, 10, 34, 546]), (input: [192, 300, 69, 1, 95, 4], expected: [1, 4, 69, 95, 192, 300]), (input: [4, 32, 23, 12, 6532, 64, 345, 1], expected: [1, 4, 12,  23, 32, 64, 345, 6532]), (input: [19, 3, 99, 432, 51, 7, 8888], expected: [3, 7, 19, 51, 99, 432, 8888])]
        
        //act
        //assert
        for testCase in testCases {
            let actual = sorting.insertionSort(array: testCase.input)
            XCTAssertEqual(actual, testCase.expected)
        }
    }
        
// ------------- bubble sort performance tests ---------------
        
    func testBubbleSortPerformance1() {
        let data1 = [281, 136, 19, 498, 638]
    

        let sorting = Sorting()
            
        measure {
            sorting.bubbleSort(array: data1)
        
        }

    }
    
    func testBubbleSortPerformance2() {
        let data = [207, 758, 871, 960, 644, 182, 812, 313, 477, 381, 288, 906, 865, 160, 142, 993, 13, 252, 101, 696, 481, 444, 187, 207, 629, 274, 61, 154, 260, 838, 484, 245, 813, 269, 800, 579, 703, 803, 521, 815, 163, 911, 666, 612, 585, 784, 364, 472, 899, 591]
      


        let sorting = Sorting()
            
        measure {
            sorting.bubbleSort(array: data)
        
        }

    }
    
    func testBubbleSortPerformance3() {
        
        let data = [198, 823, 490, 520, 341, 87, 101, 889, 612, 525, 464, 3, 109, 208, 582, 323, 529, 227, 301, 617, 530, 721, 730, 223,662, 929, 290, 66, 997, 464, 165, 955, 503, 141, 688, 938,758, 34, 34, 770, 689, 194, 259, 225, 765, 536, 339, 373, 116, 338, 821, 84, 814, 627, 647, 532, 258, 185, 677, 339, 651, 833, 438, 136, 250, 949, 18, 82, 811, 704, 297, 620, 768, 335, 857, 352, 352, 417, 852, 982, 469, 869, 638, 458, 716, 949, 350, 173, 668, 604, 765, 384, 590, 867, 682, 307,922, 575, 260, 150, 155, 434, 104, 449, 18, 436, 846, 954,554, 617, 405, 279, 299, 213, 394, 925, 367, 298, 539, 767, 788, 376, 409, 627, 544, 377, 277, 66, 300, 856, 692, 794, 859, 407, 189, 449, 265, 418, 994, 961, 614, 313, 547, 414, 313, 995, 878, 703, 66, 111, 417, 421, 852, 147, 774, 154, 88, 283, 431, 907, 895, 756, 509, 570, 60, 32, 4, 212, 182, 564, 117, 419, 277, 546, 496, 193, 394, 747, 444, 226, 201, 348, 690, 708, 281, 292, 713, 913, 831, 261, 514, 561,512, 548, 307, 855, 47, 188, 330, 500, 947, 85, 116, 743, 606, 101, 611, 610, 865, 417, 182, 328, 456, 600, 832, 602,795, 488, 165, 615, 79, 693, 476, 325, 540, 480, 606, 37, 49, 519, 201, 981, 999, 832, 298, 221, 600, 590, 433, 416, 829, 559, 513, 208, 490, 756, 230, 273, 600, 294, 105, 177,722, 370, 156, 9, 735, 25, 354, 789, 174, 795, 31, 180, 263, 235, 378, 714, 47, 260, 943, 824, 450, 601, 832, 687, 290, 197, 829, 860, 951, 343, 45, 952, 420, 882, 254, 849, 40, 248, 569, 987, 151, 292, 153, 37, 278, 649, 74, 504, 832,452, 756, 122, 996, 200, 894, 625, 65, 300, 308, 540, 653,683, 336, 805, 464, 905, 562, 921, 895, 57, 325, 575, 878,616, 470, 577, 363, 287, 325, 120, 201, 659, 189, 137, 694, 873, 320, 901, 61, 991, 440, 381, 389, 727, 602, 47, 475,417, 609, 672, 284, 774, 201, 697, 647, 238, 342, 36, 579,654, 855, 574, 195, 484, 327, 374, 428, 573, 526, 282, 828, 698, 847, 464, 102, 250, 442, 128, 936, 867, 942, 282, 252, 288, 537, 927, 122, 537, 889, 706, 548, 346, 933, 496, 119, 176, 212, 536, 463, 915, 931, 42, 310, 111, 458, 608, 851, 84, 921, 820, 832, 820, 638, 853, 244, 313, 247, 733, 17, 568, 481, 131, 510, 126, 676, 976, 282, 386, 878, 53, 442, 376, 437, 361, 879, 749, 442, 125, 597, 475, 478, 347, 350, 406, 561, 434, 146, 991, 899, 664, 835, 632, 477, 358, 831, 230, 419, 751, 803, 509, 802, 55, 898, 111, 619, 746, 744, 875, 566, 547, 851, 698, 672, 296, 302, 39, 15, 503, 287, 683, 192, 373, 274, 395, 542, 24, 899, 506, 862, 628, 270, 13, 467, 865, 613, 774, 328, 302]



        let sorting = Sorting()
            
        measure {
            sorting.bubbleSort(array: data)
        
        }

    }

// --------------insertion sort performance tests ----------------------
    
    func testInsertionSortPerformance1() {
        let data1 = [281, 136, 19, 498, 638]
    

        let sorting = Sorting()
            
        measure {
            sorting.insertionSort(array: data1)
        
        }

    }
    
    func testInsertionSortPerformance2() {
        let data = [207, 758, 871, 960, 644, 182, 812, 313, 477, 381, 288, 906, 865, 160, 142, 993, 13, 252, 101, 696, 481, 444, 187, 207, 629, 274, 61, 154, 260, 838, 484, 245, 813, 269, 800, 579, 703, 803, 521, 815, 163, 911, 666, 612, 585, 784, 364, 472, 899, 591]
      


        let sorting = Sorting()
            
        measure {
            sorting.insertionSort(array: data)
        
        }

    }
    
    func testInsertionSortPerformance3() {
        
        let data = [198, 823, 490, 520, 341, 87, 101, 889, 612, 525, 464, 3, 109, 208, 582, 323, 529, 227, 301, 617, 530, 721, 730, 223,662, 929, 290, 66, 997, 464, 165, 955, 503, 141, 688, 938,758, 34, 34, 770, 689, 194, 259, 225, 765, 536, 339, 373, 116, 338, 821, 84, 814, 627, 647, 532, 258, 185, 677, 339, 651, 833, 438, 136, 250, 949, 18, 82, 811, 704, 297, 620, 768, 335, 857, 352, 352, 417, 852, 982, 469, 869, 638, 458, 716, 949, 350, 173, 668, 604, 765, 384, 590, 867, 682, 307,922, 575, 260, 150, 155, 434, 104, 449, 18, 436, 846, 954,554, 617, 405, 279, 299, 213, 394, 925, 367, 298, 539, 767, 788, 376, 409, 627, 544, 377, 277, 66, 300, 856, 692, 794, 859, 407, 189, 449, 265, 418, 994, 961, 614, 313, 547, 414, 313, 995, 878, 703, 66, 111, 417, 421, 852, 147, 774, 154, 88, 283, 431, 907, 895, 756, 509, 570, 60, 32, 4, 212, 182, 564, 117, 419, 277, 546, 496, 193, 394, 747, 444, 226, 201, 348, 690, 708, 281, 292, 713, 913, 831, 261, 514, 561,512, 548, 307, 855, 47, 188, 330, 500, 947, 85, 116, 743, 606, 101, 611, 610, 865, 417, 182, 328, 456, 600, 832, 602,795, 488, 165, 615, 79, 693, 476, 325, 540, 480, 606, 37, 49, 519, 201, 981, 999, 832, 298, 221, 600, 590, 433, 416, 829, 559, 513, 208, 490, 756, 230, 273, 600, 294, 105, 177,722, 370, 156, 9, 735, 25, 354, 789, 174, 795, 31, 180, 263, 235, 378, 714, 47, 260, 943, 824, 450, 601, 832, 687, 290, 197, 829, 860, 951, 343, 45, 952, 420, 882, 254, 849, 40, 248, 569, 987, 151, 292, 153, 37, 278, 649, 74, 504, 832,452, 756, 122, 996, 200, 894, 625, 65, 300, 308, 540, 653,683, 336, 805, 464, 905, 562, 921, 895, 57, 325, 575, 878,616, 470, 577, 363, 287, 325, 120, 201, 659, 189, 137, 694, 873, 320, 901, 61, 991, 440, 381, 389, 727, 602, 47, 475,417, 609, 672, 284, 774, 201, 697, 647, 238, 342, 36, 579,654, 855, 574, 195, 484, 327, 374, 428, 573, 526, 282, 828, 698, 847, 464, 102, 250, 442, 128, 936, 867, 942, 282, 252, 288, 537, 927, 122, 537, 889, 706, 548, 346, 933, 496, 119, 176, 212, 536, 463, 915, 931, 42, 310, 111, 458, 608, 851, 84, 921, 820, 832, 820, 638, 853, 244, 313, 247, 733, 17, 568, 481, 131, 510, 126, 676, 976, 282, 386, 878, 53, 442, 376, 437, 361, 879, 749, 442, 125, 597, 475, 478, 347, 350, 406, 561, 434, 146, 991, 899, 664, 835, 632, 477, 358, 831, 230, 419, 751, 803, 509, 802, 55, 898, 111, 619, 746, 744, 875, 566, 547, 851, 698, 672, 296, 302, 39, 15, 503, 287, 683, 192, 373, 274, 395, 542, 24, 899, 506, 862, 628, 270, 13, 467, 865, 613, 774, 328, 302]



        let sorting = Sorting()
            
        measure {
            sorting.insertionSort(array: data)
        
        }

    }
    
// -------------------Quick Sort Performance tests ------------------
    
    func testQuickSortPerformance1() {
        let data1 = [281, 136, 19, 498, 638]
    

        let sorting = Sorting()
            
        measure {
            sorting.quickSort(array: data1)
        
        }

    }
    
    func testQuickSortPerformance2() {
        let data = [207, 758, 871, 960, 644, 182, 812, 313, 477, 381, 288, 906, 865, 160, 142, 993, 13, 252, 101, 696, 481, 444, 187, 207, 629, 274, 61, 154, 260, 838, 484, 245, 813, 269, 800, 579, 703, 803, 521, 815, 163, 911, 666, 612, 585, 784, 364, 472, 899, 591]
      


        let sorting = Sorting()
            
        measure {
            sorting.quickSort(array: data)
        
        }

    }
    
    func testQuickSortPerformance3() {
        
        let data = [198, 823, 490, 520, 341, 87, 101, 889, 612, 525, 464, 3, 109, 208, 582, 323, 529, 227, 301, 617, 530, 721, 730, 223,662, 929, 290, 66, 997, 464, 165, 955, 503, 141, 688, 938,758, 34, 34, 770, 689, 194, 259, 225, 765, 536, 339, 373, 116, 338, 821, 84, 814, 627, 647, 532, 258, 185, 677, 339, 651, 833, 438, 136, 250, 949, 18, 82, 811, 704, 297, 620, 768, 335, 857, 352, 352, 417, 852, 982, 469, 869, 638, 458, 716, 949, 350, 173, 668, 604, 765, 384, 590, 867, 682, 307,922, 575, 260, 150, 155, 434, 104, 449, 18, 436, 846, 954,554, 617, 405, 279, 299, 213, 394, 925, 367, 298, 539, 767, 788, 376, 409, 627, 544, 377, 277, 66, 300, 856, 692, 794, 859, 407, 189, 449, 265, 418, 994, 961, 614, 313, 547, 414, 313, 995, 878, 703, 66, 111, 417, 421, 852, 147, 774, 154, 88, 283, 431, 907, 895, 756, 509, 570, 60, 32, 4, 212, 182, 564, 117, 419, 277, 546, 496, 193, 394, 747, 444, 226, 201, 348, 690, 708, 281, 292, 713, 913, 831, 261, 514, 561,512, 548, 307, 855, 47, 188, 330, 500, 947, 85, 116, 743, 606, 101, 611, 610, 865, 417, 182, 328, 456, 600, 832, 602,795, 488, 165, 615, 79, 693, 476, 325, 540, 480, 606, 37, 49, 519, 201, 981, 999, 832, 298, 221, 600, 590, 433, 416, 829, 559, 513, 208, 490, 756, 230, 273, 600, 294, 105, 177,722, 370, 156, 9, 735, 25, 354, 789, 174, 795, 31, 180, 263, 235, 378, 714, 47, 260, 943, 824, 450, 601, 832, 687, 290, 197, 829, 860, 951, 343, 45, 952, 420, 882, 254, 849, 40, 248, 569, 987, 151, 292, 153, 37, 278, 649, 74, 504, 832,452, 756, 122, 996, 200, 894, 625, 65, 300, 308, 540, 653,683, 336, 805, 464, 905, 562, 921, 895, 57, 325, 575, 878,616, 470, 577, 363, 287, 325, 120, 201, 659, 189, 137, 694, 873, 320, 901, 61, 991, 440, 381, 389, 727, 602, 47, 475,417, 609, 672, 284, 774, 201, 697, 647, 238, 342, 36, 579,654, 855, 574, 195, 484, 327, 374, 428, 573, 526, 282, 828, 698, 847, 464, 102, 250, 442, 128, 936, 867, 942, 282, 252, 288, 537, 927, 122, 537, 889, 706, 548, 346, 933, 496, 119, 176, 212, 536, 463, 915, 931, 42, 310, 111, 458, 608, 851, 84, 921, 820, 832, 820, 638, 853, 244, 313, 247, 733, 17, 568, 481, 131, 510, 126, 676, 976, 282, 386, 878, 53, 442, 376, 437, 361, 879, 749, 442, 125, 597, 475, 478, 347, 350, 406, 561, 434, 146, 991, 899, 664, 835, 632, 477, 358, 831, 230, 419, 751, 803, 509, 802, 55, 898, 111, 619, 746, 744, 875, 566, 547, 851, 698, 672, 296, 302, 39, 15, 503, 287, 683, 192, 373, 274, 395, 542, 24, 899, 506, 862, 628, 270, 13, 467, 865, 613, 774, 328, 302]



        let sorting = Sorting()
            
        measure {
            sorting.quickSort(array: data)
        
        }

    }
// --------------Merge Sort Performance tests------------------
    
    func testMergeSortPerformance1() {
        let data1 = [281, 136, 19, 498, 638]
    

        let sorting = Sorting()
            
        measure {
            sorting.mergeSort(array: data1)
        
        }

    }
    
    func testMergeSortPerformance2() {
        let data = [207, 758, 871, 960, 644, 182, 812, 313, 477, 381, 288, 906, 865, 160, 142, 993, 13, 252, 101, 696, 481, 444, 187, 207, 629, 274, 61, 154, 260, 838, 484, 245, 813, 269, 800, 579, 703, 803, 521, 815, 163, 911, 666, 612, 585, 784, 364, 472, 899, 591]
      


        let sorting = Sorting()
            
        measure {
            sorting.mergeSort(array: data)
        
        }

    }
    
    func testMergeSortPerformance3() {
        
        let data = [198, 823, 490, 520, 341, 87, 101, 889, 612, 525, 464, 3, 109, 208, 582, 323, 529, 227, 301, 617, 530, 721, 730, 223,662, 929, 290, 66, 997, 464, 165, 955, 503, 141, 688, 938,758, 34, 34, 770, 689, 194, 259, 225, 765, 536, 339, 373, 116, 338, 821, 84, 814, 627, 647, 532, 258, 185, 677, 339, 651, 833, 438, 136, 250, 949, 18, 82, 811, 704, 297, 620, 768, 335, 857, 352, 352, 417, 852, 982, 469, 869, 638, 458, 716, 949, 350, 173, 668, 604, 765, 384, 590, 867, 682, 307,922, 575, 260, 150, 155, 434, 104, 449, 18, 436, 846, 954,554, 617, 405, 279, 299, 213, 394, 925, 367, 298, 539, 767, 788, 376, 409, 627, 544, 377, 277, 66, 300, 856, 692, 794, 859, 407, 189, 449, 265, 418, 994, 961, 614, 313, 547, 414, 313, 995, 878, 703, 66, 111, 417, 421, 852, 147, 774, 154, 88, 283, 431, 907, 895, 756, 509, 570, 60, 32, 4, 212, 182, 564, 117, 419, 277, 546, 496, 193, 394, 747, 444, 226, 201, 348, 690, 708, 281, 292, 713, 913, 831, 261, 514, 561,512, 548, 307, 855, 47, 188, 330, 500, 947, 85, 116, 743, 606, 101, 611, 610, 865, 417, 182, 328, 456, 600, 832, 602,795, 488, 165, 615, 79, 693, 476, 325, 540, 480, 606, 37, 49, 519, 201, 981, 999, 832, 298, 221, 600, 590, 433, 416, 829, 559, 513, 208, 490, 756, 230, 273, 600, 294, 105, 177,722, 370, 156, 9, 735, 25, 354, 789, 174, 795, 31, 180, 263, 235, 378, 714, 47, 260, 943, 824, 450, 601, 832, 687, 290, 197, 829, 860, 951, 343, 45, 952, 420, 882, 254, 849, 40, 248, 569, 987, 151, 292, 153, 37, 278, 649, 74, 504, 832,452, 756, 122, 996, 200, 894, 625, 65, 300, 308, 540, 653,683, 336, 805, 464, 905, 562, 921, 895, 57, 325, 575, 878,616, 470, 577, 363, 287, 325, 120, 201, 659, 189, 137, 694, 873, 320, 901, 61, 991, 440, 381, 389, 727, 602, 47, 475,417, 609, 672, 284, 774, 201, 697, 647, 238, 342, 36, 579,654, 855, 574, 195, 484, 327, 374, 428, 573, 526, 282, 828, 698, 847, 464, 102, 250, 442, 128, 936, 867, 942, 282, 252, 288, 537, 927, 122, 537, 889, 706, 548, 346, 933, 496, 119, 176, 212, 536, 463, 915, 931, 42, 310, 111, 458, 608, 851, 84, 921, 820, 832, 820, 638, 853, 244, 313, 247, 733, 17, 568, 481, 131, 510, 126, 676, 976, 282, 386, 878, 53, 442, 376, 437, 361, 879, 749, 442, 125, 597, 475, 478, 347, 350, 406, 561, 434, 146, 991, 899, 664, 835, 632, 477, 358, 831, 230, 419, 751, 803, 509, 802, 55, 898, 111, 619, 746, 744, 875, 566, 547, 851, 698, 672, 296, 302, 39, 15, 503, 287, 683, 192, 373, 274, 395, 542, 24, 899, 506, 862, 628, 270, 13, 467, 865, 613, 774, 328, 302]



        let sorting = Sorting()
            
        measure {
            sorting.mergeSort(array: data)
        
        }

    }


}



